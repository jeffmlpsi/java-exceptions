/*
 * This source file was generated by the Gradle 'init' task
 */
package jexceptions;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    void openFile1(String filename, boolean forceError) throws FileNotFoundException {
        File fn;
        FileReader fr = null;
        try {
            String fileNameToUse = forceError ? "some-nonexistent-file.txt" : filename;
            fn = new File(fileNameToUse);
            fr = new FileReader(fn);

        } catch (FileNotFoundException e) {
            System.err.println("Cannot find file");
            e.printStackTrace();
            throw e; //rethrow the exception
        } catch (Exception e) {
            System.err.println("Some other error happened");
            throw e; //rethrow the exception
        } finally {
            //A finally section is always executed (as long as no 
            //uncaught exceptions happen
            //You often place cleanup code in finally sections
            if (fr != null) {
                try {
                    fr.close();
                } catch (IOException e) {
                    System.err.println("Error closing file");
                }
            }  
        }
    }

    


    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        try {
            int i = 8;
            int j = 0;
            int v = i / j;
            System.out.println("v is " + v );
        } catch (ArithmeticException e) {
            System.err.println("Cannot divide by zero");
        } catch (Exception e) {
            System.err.println("Some other error happened");
        }
    }
}
